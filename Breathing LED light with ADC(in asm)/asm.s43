#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        ORG     0FFECh                  ; Setting ISR for ADC
        DC16      ADC_ISR

        ;ORG     0FFDEh                  ; Setting ISR for PORT1
        ;DW      P1_ISR
        
        ORG     0FFEAh                  ; Setting ISR for TA0
        DC16      TIMER0
        
        ORG     0FFE2h                  ; Setting ISR for TA1
        DC16      TIMER1
        
    //    ORG     0FFEAh                  ; Setting ISR for TA0 (CCIFG0)

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        // Setting Started Pin 1.4
        MOV.B #00010000b, P1REN         
        MOV.B #00000000b, P1OUT
waiting:    
        MOV.B P1IN, R4
        AND.B #00010000b, R4
        CMP.B #00010000b, R4
        JNZ waiting
        // Load for ADC setting (A5)
        MOV.W   #ADC12ON + ADC12MSC + ADC12SHT03  , &ADC12CTL0;
        MOV.W   #ADC12CONSEQ0 + ADC12CONSEQ1 + ADC12SHP , &ADC12CTL1;
        BIS.W   #ADC12SSEL1 , &ADC12CTL1;
        MOV.W   #ADC12RES_2 , &ADC12CTL2;
        MOV.W   #ADC12IE0 , &ADC12IE;
        BIS.B   #ADC12INCH0+ ADC12INCH2 , &ADC12MCTL0;
        BIS.B   #ADC12EOS , &ADC12MCTL5;
        BIS.W   #ADC12ENC , &ADC12CTL0;
        
        BIS.B   #00100000b, &P6SEL;
        
        bis.w #ADC12SC , &ADC12CTL0
        // Setting LED 4.7
        BIS.B   #10000000b, &P4DIR
        BIC.B    #10000000b, &P4OUT
        // P2.5
        BIS.B    #00100000b, &P2DIR
        BIC.B    #00100000b, &P2OUT
        // Setting TA0 for PWM
        BIS.W   #TASSEL_1 + MC_1 + TACLR , &TA0CTL;
        MOV.W   #256, &TA0CCR0;
        //MOV.W   #0 , &TA0CCR1;
        BIS.W   #CCIE , &TA0CCTL0;
        // Setting TA1 for check
        BIS.W   #TASSEL_1 + MC_1 + TACLR , &TA1CTL;
        MOV.W   #1 , TA1CCR0;
        BIS.W   #CCIE , &TA1CCTL0;

        NOP
        MOV.W   #GIE+CPUOFF,SR
        NOP
        
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
TIMER0:
        MOV.W   #0 , &TA0R;
        RETI
TIMER1:
        ; R5 : 0~4096
        mov R5, R4
        rra R4
        rra R4
        rra R4
        rra R4
        cmp     R4,TA0R;
        ; negative => TA0R < R4 
        jn      Smaller
        ; if go here => TAR > TA0CCR1
        ; Turn on the light
        BIS.B   #10000000b, P4OUT;
        BIS.B   #00100000b, &P2OUT
Smaller:        
        BIC.B   #10000000b, P4OUT;
        BIC.B    #00100000b, &P2OUT
        RETI
        
ADC_ISR:
        MOV.W   &ADC12MEM0  , R5
        RETI

        END
